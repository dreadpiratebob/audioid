from api.util.functions import parse_bool
from api.util.http import QueryParam

class GetSongsQueryParams(QueryParam):
  ALBUM_ID    = 'album_id',    False, int, 'an integer', None, 'the id of the album whose songs to get; only one of this and album_name can be set.'
  ALBUM_NAME  = 'album_name',  False, str, 'a string',   None, 'the name of the album whose songs to get; only one of this and album_id can be set.'
  ALBUM_NAME_HAS_WILDCARDS      = 'album_name_has_wildcards',      False, parse_bool, 'a boolean', False, 'if album_name isn\'t set, album_name_has_wildcards is ignored.  if album_name_has_wildcards is true, % and _ in album_name will be treated as wildcards where % matches zero or more characters and _ matches exactly one character, but either % or _ can match any character; otherwise, % and _ will be treated as literals.'
  ALBUM_NAME_IS_CASE_SENSITIVE  = 'album_name_is_case_sensitive',  False, parse_bool, 'a boolean', False, 'if album_name isn\'t set, album_name_is_case_sensitive is ignored.  if album_name_is_case_sensitive is true, only albums whose names match album_name\'s case will be returned; otherwise, album\'s whose names match regardless of case will be returned.'
  ALBUM_NAME_MATCHES_DIACRITICS = 'album_name_matches_diacritics', False, parse_bool, 'a boolean', False, 'if album_name isn\'t set, album_name_matches_diacritics is ignored.  if album_name_matches_diacritics is true, letters in album_name will be matched exactly; otherwise, diacritics will be stripped out of both the albums\'s names and the album_name parameter, so "a" in the query parameter will match "ä", "à", "å", etc. in the album names.'
  FILTER_ON_NULL_ALBUM          = 'filter_on_null_album',          False, parse_bool, 'a boolean', False, 'if filter_on_null_album is true and no album is specified, this will only include songs without an album.  otherwise, it\'ll include songs regardless of album (or lack thereof).  if either of album_id or album_name is set, this will be ignored.'
  ALBUM_ARTIST_ID   = 'album_artist_id',    False, int, 'an integer', None, 'the id of the artist who wrote the album whose songs to get; only one of this and album_artist_name can be set.  if neither of album_id and album_name are set, this will be ignored.'
  ALBUM_ARTIST_NAME = 'album_artist_name',  False, str, 'a string',   None, 'the name of the artist who wrote the album whose songs to get; only one of this and album_artist_id can be set.  if neither of album_id and album_name are set, this will be ignored.'
  ALBUM_ARTIST_NAME_HAS_WILDCARDS      = 'album_artist_name_has_wildcards',      False, parse_bool, 'a boolean', True,  'if album_artist_name isn\'t set, album_artist_name_has_wildcards is ignored.  if album_artist_name_has_wildcards is false, only songs whose album artist\'s name is exactly equal to album_artist_name will be returned; otherwise, % and _ in album_artist_name will be treated as wildcards where % matches zero or more characters and _ matches exactly one character, but either % or _ can match any character.'
  ALBUM_ARTIST_NAME_IS_CASE_SENSITIVE  = 'album_artist_name_is_case_sensitive',  False, parse_bool, 'a boolean', False, 'if album_artist_name isn\'t set, album_artist_name_is_case_sensitive is ignored.  if album_artist_name_is_case_sensitive is false, only songs whose album artist\'s name is exactly equal to album_artist_name will be returned; otherwise, tracks whose album artist\'s name match album_artis_name regardless of case will be returned.'
  ALBUM_ARTIST_NAME_MATCHES_DIACRITICS = 'album_artist_name_matches_diacritics', False, parse_bool, 'a boolean', False, 'if album_artist_name isn\'t set, album_artist_name_matches_diacritics is ignored.  if album_artist_name_matches_diacritics is false, only songs whose album artist\'s name\'s diacritics exactly match album_artist_name\'s will be returned; otherwise, diacritics will be stripped out of both the artist album names and the query parameter before any comparisons are made.'
  FILTER_ON_NULL_ALBUM_ARTIST     = 'filter_on_null_album_artist',     False, parse_bool, 'a boolean', False, 'if filter_on_null_album_artist is true and no album artist is specified, this will only include songs on albums without an album artist.  otherwise, it\'ll include albums regardless of album artist (or lack thereof).  if neither of album_id and album_name or if either of album_artist_id and album_artist_name is set, this will be ignored.'
  ARTIST_ID   = 'artist_id',   False, int, 'an integer', None, 'the id of the artist whose songs to get; only one of this and artist_name can be set.'
  ARTIST_NAME = 'artist_name', False, str, 'a string',   None, 'the name of the artist whose songs to get; only one of this and artist_id can be set.'
  ARTIST_NAME_IS_AN_EXACT_MATCH = 'artist_name_is_an_exact_match', False, parse_bool, 'a boolean', True, 'if artist_name isn\'t set, artist_name_is_an_exact_match is ignored.  if artist_name_is_an_exact_match is true, only songs whose artist\'s name is exactly equal to artist_name will be returned; otherwise, % and _ in artist_name will be treated as wildcards where % matches zero or more characters and _ matches exactly one character, but either % or _ can match any character.'
  CATALOG_ID  = 'catalog_id',  True,  int, 'an integer', None, 'the id of the catalog to retrieve songs from'
  GENRE_ID    = 'genre_id',    False, int, 'an integer', None, 'the id of the genre whose songs to get; only one of this and genre_name can be set.'
  GENRE_NAME  = 'genre_name',  False, str, 'a string',   None, 'the name of the genre whose songs to get; only one of this and genre_id can be set.'
  GENRE_NAME_IS_AN_EXACT_MATCH = 'genre_name_is_an_exact_match', False, parse_bool, 'a boolean', True, 'if genre_name isn\'t set, genre_name_is_an_exact_match is ignored.  if genre_name_is_an_exact_match is true, only songs whose genre\'s name is exactly equal to genre_name will be returned; otherwise,  % and _ in genre_name will be treated as wildcards where % matches zero or more characters and _ matches exactly one character, but either % or _ can match any character.'
  SONG_TITLE   = 'song_title',   False, str, 'a string',   None, 'the title of the songs to get'
  SONG_TITLE_HAS_WILDCARDS      = 'song_title_has_wildcards',      False, parse_bool, 'a boolean', False, 'if song_title isn\'t set, song_title_has_wildcards is ignored.  if song_title_has_wildcards is true, % and _ in song_title will be treated as wildcards where % matches zero or more characters and _ matches exactly one character, but either % or _ can match any character.  if song_title_has_wildcards is false, % and _ will be treated literally.'
  SONG_TITLE_IS_CASE_SENSITIVE  = 'song_title_is_case_sensitive',  False, parse_bool, 'a boolean', False, 'if song_title isn\'t set, song_title_is_case_sensitive is ignored.  if song_title_is_case_sensitive is true, letters in song_title will be matched exactly; otherwise, they\'ll match letters regardless of case.'
  SONG_TITLE_MATCHES_DIACRITICS = 'song_title_matches_diacritics', False, parse_bool, 'a boolean', False, 'if song_title isn\'t set, song_title_matches_diacritics is ignored.  if song_title_matches_diacritics is true, letters in song_title will be matched exactly; otherwise, diacritics will be stripped out of both the song_title parameter and song\'s title, so "a" in the query parameter will match "ä", "à", "å", etc. in the song title.'
  SONG_YEAR   = 'song_year',   False, int, 'an integer', None, 'the year of the songs to get'